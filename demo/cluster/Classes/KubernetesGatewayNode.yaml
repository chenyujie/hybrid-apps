#  Licensed under the Apache License, Version 2.0 (the "License"); you may
#  not use this file except in compliance with the License. You may obtain
#  a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
#  WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
#  License for the specific language governing permissions and limitations
#  under the License.

Namespaces:
  =: io.murano.apps.docker.kubernetes
  std: io.murano
  res: io.murano.resources
  sys: io.murano.system

Name: KubernetesGatewayNode

Extends: KubernetesMasterNode

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()

  deployInstance:
#    Body:
#      - If: not $.getAttr(instanceDeployed, false)
#        Then:
#          - $._environment.reporter.report($this, 'Creating Gateway node for Kubernetes services')
#          - $.super($.deployInstance())
#          - $.setAttr(instanceDeployed, true)

  getExtIp:
    Body:
      Return: coalesce($.instance.floatingIpAddress, $.getIp())

  restart:
#    Body:
#      - $.instance.restart()
#      - If: $.instance.assignFloatingIp
#        Then:
#          - $._environment.reporter.report($, 'Gateway {0} available at {1}'.format($.instance.name, $.instance.floatingIpAddress))


  setupEtcd:


  setupNode:
    Body:
      - If: not $.getAttr(nodeConfigured, false)
        Then:
          - $._cluster: $.find(KubernetesCluster).require()
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('SetupFlannelNode.template').bind(dict(
                masterIp => $._cluster.masterNode.getIp(),
                ip => $.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $._environment.reporter.report($this, 'Setup Flannel network on {0}'.format($.instance.name))

          - $template: $resources.yaml('HAProxySetup.template').bind(dict(
                masterIp => $._cluster.masterNode.getIp()
              ))
          - $.instance.agent.call($template, $resources)
          - $._environment.reporter.report($, 'Setup Load Balancer on {0}'.format($.instance.name))
          - $.setAttr(nodeConfigured, true)

