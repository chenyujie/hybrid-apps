Namespaces:
  =: io.murano.apps.huawei
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: EmallBackendCluster

Extends: std:Application

Properties:  
  name:
    Contract: $.string().notNull()

  emallNodes:
    Contract:
      - $.class(res:LinuxMuranoInstance).notNull()
      - 1

  nodeCount:
    Contract: $.int().notNull().check($ > 0)
    Usage: InOut

  availabilityZones:
    Contract:
      - $.string().notNull()

  network:
    Contract: $.string().notNull()

  vip:
    Contract: $.string()
    Usage: Out

  instance_uuids:
    Contract:
      - az: $.string().notNull()
        id: $.string().notNull()
        name: $.string().notNull()
    Default: []
    Usage: Out

Methods:
  initialize:
    Body:
      - $._environment: $.find(std:Environment).require()
      - $._netExplorer: new(sys:NetworkExplorer)
      - $.template: {}

  getAZ:
    Body:
      - $AZIdx: $.getAttr(AZIdx, 0)
      - $AZIdx: $AZIdx + 1
      - If: $AZIdx >= len($.availabilityZones)
        Then:
          - $AZIdx: 0
      - $.setAttr(AZIdx, $AZIdx)
      - Return: $.availabilityZones[$AZIdx]

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $securityGroupIngress:
              - ToPort: 3306
                FromPort: 3306
                IpProtocol: tcp
                External: true
              - ToPort: 4568
                FromPort: 4567
                IpProtocol: tcp
                External: true
              - ToPort: 4444
                FromPort: 4444
                IpProtocol: tcp
                External: true
          - $._environment.securityGroupManager.addGroupIngress($securityGroupIngress)
          - $._environment.reporter.report($this, 'creating emall backend cluster servers...')

          - $idx: $.getAttr(IDX, 0)
          - While: $idx < $.nodeCount
            Do:
              - $.emallNodes[$idx].setAZ($.getAZ())
              - $idx: $idx + 1
          - $.setAttr(IDX, $idx)

          - Parallel:
              - Do: $.emallNodes.take($.nodeCount).pselect($.deploy())

          - $networks: $._netExplorer.listNetworks()
          - For: net
            In: $networks
            Do:
              - If: $net.id = $.network
                Then:
                  - $subId: $net.subnets[0]

          - $lb_id: randomName()
          - $vip_name: $lb_id + '-vip'
          - $template:
              resources:
                $lb_id:
                  type: 'OS::Neutron::Pool'
                  properties:
                    name: $.name
                    lb_method: 'ROUND_ROBIN'
                    protocol: 'TCP'
                    subnet: $subId
                    vip:
                      subnet: $subId
                      protocol_port: 3306
              outputs:
                $vip_name:
                  value:
                    get_attr: [$lb_id, vip, address]
          - $.template: $.template.mergeWith($template)
          - For: node
            In: $.emallNodes
            Do:
              - $.joinLB($lb_id, $node)
          - $._environment.stack.updateTemplate($.template)
          - $.setAttr(template, $.template)
          - $._environment.stack.push()
          - $outputs: $._environment.stack.output()
          - $.vip: $outputs.get($vip_name)
          - $.instance_uuids: list()
          - $vm: format('{0}-{1}', $node.name, $node.id())
          - For: node
            In: $.emallNodes
            Do:
              - $new_instance_uuid:
                  az: $node.availabilityZone
                  id: $outputs.get($vm + '-id')
                  name: $node.name
              - $.instance_uuids: $.instance_uuids + list($new_instance_uuid)
          - $.setAttr(instance_uuids, $.instance_uuids)
          - Parallel:
              - Do: $.emallNodes.take($.nodeCount).pselect($.restart())

          - $members: join(',', $.emallNodes.take($.nodeCount).select($.ipAddresses[0]))
          - $._environment.reporter.report($, format('Cluster members are {0}', $members))

#          - $.setupNode($.emallNodes[0], 'master', 'true', $members)
#          - $idx: 1
#          - While: $idx < $.nodeCount
#            Do:
#              - $.setupNode($.emallNodes[$idx], 'slave', 'false', $members)
#              - $idx: $idx + 1

          - $._environment.reporter.report($, 'Configuring master node')
#          - $.setupNode($.emallNodes[0], true, $members)
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('EmallBackendCluster.template').bind(dict(
                cluster => $.name,
                members => $members,
                name => $.emallNodes[0].name,
                master => 'true'
              ))
          - $.emallNodes[0].agent.call($template, $resources)

#          - $ndx: 1
#          - While: $ndx < $nodeCount
#            Do:
#              - $._environment.reporter.report($, 'Configuring node {0}'.format($.emallNodes[$ndx].name))
#              - $resources: new(sys:Resources)
#              - $template: $resources.yaml('EmallBackendCluster.template').bind(dict(
#                    cluster => $.name,
#                    members => $members,
#                    name => $.emallNodes[$ndx].name,
#                    master => 'false'
#                  ))
#              - $.emallNodes[$ndx].agent.call($template, $resources)
#              - $ndx: $ndx + 1

          - $._environment.reporter.report($, 'Configuring slave node 1')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('EmallBackendCluster.template').bind(dict(
                cluster => $.name,
                members => $members,
                name => $.emallNodes[1].name,
                master => 'false'
              ))
          - $.emallNodes[1].agent.call($template, $resources)

          - $._environment.reporter.report($, 'Configuring slave node 2')
          - $resources: new(sys:Resources)
          - $template: $resources.yaml('EmallBackendCluster.template').bind(dict(
                cluster => $.name,
                members => $members,
                name => $.emallNodes[2].name,
                master => 'false'
              ))
          - $.emallNodes[2].agent.call($template, $resources)

          - $.setAttr(deployed, true)
          - $._environment.reporter.report($this, format('emall backend cluster server({0}) is up and running', $.vip))

  setupNode:
    Arguments:
      - node:
          Contract: $.class(res:LinuxMuranoInstance).notNull()
      - master:
          Contract: $.bool().notNull()
      - members:
          Contract: $.string().notNull()
    Body: 
      - $._environment.reporter.report($, format('Configuring {0} node', $node.name))
      - $resources: new(sys:Resources)
      - If: $master
        Then:
          - $mode: 'master'
        Else:
          - $mode: 'slave'
      - $template: $resources.yaml('EmallBackendCluster.template').bind(dict(
            cluster => $.name,
            members => $members,
            name => $node.name,
            master => $mode
          ))
      - $node.agent.call($template, $resources)

  destroy:
    Body:
      - For: node
        In: $.emallNodes
        Do:
          - $node.destroy()

  joinLB:
    Arguments:
      - lb_id:
          Contract: $.string()
      - node:
          Contract: $.class(res:LinuxMuranoInstance).notNull()
    Body:
      - $vm: format('{0}-{1}', $node.name, $node.id())
      - $template:
          resources:
            $vm + '-member':
              type: 'OS::Neutron::PoolMember'
              properties:
                pool_id: {get_resource: $lb_id}
                address: {get_attr: [$vm, first_address]}
                protocol_port: 3306
          outputs:
            $vm + '-id':
              value:
                get_attr: [$vm, show, id]
      - $.template: $.template.mergeWith($template)