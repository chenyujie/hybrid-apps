Namespaces:
  =: io.murano.apps.huawei
  res: io.murano.resources
  std: io.murano
  sys: io.murano.system

Name: EmallLB

Extends: std:Application

Properties:  
  name:
    Contract: $.string().notNull()

Methods:
  initialize:
    Body:
      - $.environment: $.find(std:Environment).require()
      - $.network: $.environment.defaultNetworks.environment
      - $.vip: null

  deploy:
    Body:
      - If: not $.getAttr(deployed, false)
        Then:
          - $vip_name: randomName()
          - $template:
              resources:
                $vip_name:
                  type: 'OS::Neutron::Pool'
                  properties:
                    name: $.name
                    lb_method: 'ROUND_ROBIN'
                    protocol: 'HTTP'
                    subnet: { get_resource: $.network._getSubnetName() }
                    vip:
                      subnet: { get_resource: $.network._getSubnetName() }
                      protocol_port: 80
              outputs:
                $vip_name + '-vip':
                  value:
                    get_attr: [$vip_name, vip, address]
          - $.environment.reporter.report($this, 'Creating Load Balancer...')
          - $.environment.stack.updateTemplate($template)
          - $.setAttr(template, $template)
          - $.environment.stack.push()
          - $.setAttr(deployed, true)
          - $outputs: $.environment.stack.output()
          - $.vip: $outputs.get($vip_name + '-vip')
      - $.environment.reporter.report($this, format('Load Balancer {0} is up and running at {1}', $.name, $.vip))

  destroy:
    Body:
      - $template: $.getAttr(template, '{}')
      - $.environment.stack.excludeTemplate($template)
      - $.environment.stack.push()
